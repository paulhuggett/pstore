name: CI Build/Test
# Triggers the workflow on push or pull request events
on: [push, pull_request]
permissions:
  contents: read

jobs:
    build:
        strategy:
            matrix:
                include:
                    # macOS builds
                    # ~~~~~~~~~~~~
                    - name: macOS-latest/Xcode/Debug
                      build_type: Debug
                      generator: Xcode
                      options: '-DPSTORE_ALWAYS_SPANNING=Yes'
                      os: macos-latest

                    - name: macOS-latest/Xcode/Release
                      build_type: Release
                      generator: Xcode
                      os: macos-latest


                    # Ubuntu builds
                    # ~~~~~~~~~~~~~
                    - name: Ubuntu-latest/gcc-11/Debug
                      apt_install: ninja-build
                      build_type: Debug
                      cxx_compiler: -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_C_COMPILER=gcc-11
                      generator: Ninja
                      options: -DPSTORE_ALWAYS_SPANNING=Yes
                      os: ubuntu-latest

                    - name: Ubuntu-latest/gcc-11/Release
                      build_type: Release
                      cxx_compiler: -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_C_COMPILER=gcc-11
                      generator: Unix Makefiles
                      os: ubuntu-latest


                    - name: Ubuntu-latest/clang-14/Debug
                      apt_install: valgrind ninja-build
                      build_type: Debug
                      cxx_compiler: -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_C_COMPILER=clang-14
                      generator: Ninja
                      # Temporarily disable valgrind.
                      # -DPSTORE_VALGRIND=Yes
                      options: -DPSTORE_ALWAYS_SPANNING=Yes -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold
                      os: ubuntu-latest

                    - name: Ubuntu-latest/clang-14/Release
                      apt_install: ninja-build
                      build_type: Release
                      cxx_compiler: -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_C_COMPILER=clang-14
                      generator: Ninja
                      options: '-DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold'
                      os: ubuntu-latest

                    # Windows builds
                    # ~~~~~~~~~~~~~~
                    - name: Windows-latest/VS2022/Debug
                      build_type: Debug
                      generator: Visual Studio 17 2022
                      options: '-DPSTORE_ALWAYS_SPANNING=Yes'
                      os: windows-latest

                    - name: Windows-latest/VS2022/Release
                      build_type: Release
                      generator: Visual Studio 17 2022
                      os: windows-latest

                    - name: Windows-2019/VS2019/Debug
                      build_type: Debug
                      generator: Visual Studio 16 2019
                      options: '-DPSTORE_ALWAYS_SPANNING=Yes'
                      os: Windows-2019

                    - name: Windows-2019/VS2019/Release
                      build_type: Release
                      generator: Visual Studio 16 2019
                      os: Windows-2019

        name: ${{ matrix.name }}
        runs-on: ${{ matrix.os }}

        steps:
            - name: Harden Runner
              uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
              with:
                egress-policy: audit

            - name: Checkout repository
              uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
              with:
                submodules: 'True'

            - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
              with:
                node-version: 16

            - name: Install Dependencies (Linux)
              if: startsWith(matrix.os, 'ubuntu-') && matrix.apt_install != ''
              run: sudo apt-get update && sudo apt-get install -y ${{ matrix.apt_install }}

            - name: Create Build Environment
              run: cmake -E make_directory ${{ github.workspace }}/build

            - name: Configure CMake
              shell: bash
              working-directory: ${{ github.workspace }}/build
              run: |
                  cmake "$GITHUB_WORKSPACE"                          \
                        -G "${{ matrix.generator }}"                 \
                        -D PSTORE_EXAMPLES=Yes                       \
                        -D PSTORE_NOISY_UNIT_TESTS=Yes               \
                        -D PSTORE_WERROR=Yes                         \
                        -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                        ${{ matrix.cxx_compiler }}                   \
                        ${{ matrix.options }}

            - name: Build
              working-directory: ${{ github.workspace }}/build
              shell: bash
              run: cmake --build . --config ${{ matrix.build_type }}

            - name: System Tests
              working-directory: ${{ github.workspace }}/build
              shell: bash
              run: cmake --build . --config ${{ matrix.build_type }} --target pstore-system-tests
